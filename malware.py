import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler

# Load the dataset
df = pd.read_csv(r"C:\Users\Administrator\Desktop\pythonprojects\Malware.csv")

# Convert text labels to numeric values
df['classification'] = df['classification'].map({'malware': 1, 'benign': 0})

# Preprocess the data
# We can remove the 'hash' column as it is not useful for machine learning purposes (it is just an identifier)
df.drop(columns=['hash'], inplace=True)

# Handle missing values by filling them with the mean of each column
df.fillna(df.mean(), inplace=True)

# The 'classification' column is the target variable, where 0 = benign, 1 = malware
X = df.drop(columns=['classification'])  # Feature set (all columns except 'classification')
y = df['classification']  # Target variable

# Split the dataset into training and testing sets (70% training, 30% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features (important for some algorithms like SVM, Logistic Regression, etc.)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Feature importance: Check which features are most important for prediction
feature_importances = model.feature_importances_
important_features = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})
important_features = important_features.sort_values(by='Importance', ascending=False)

# Print the top important features
print("Top Important Features:")
print(important_features.head())
